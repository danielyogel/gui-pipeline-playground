/* eslint-disable */ 
// tslint:disable
/**
 * Buildboard Campaign Publishing platform
 * Buildboard server API spec
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@buildboard.tv
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Campaign
 */
export interface Campaign {
    /**
     * 
     * @type {string}
     * @memberof Campaign
     */
    name: string;
    /**
     * 
     * @type {CampaignConfig}
     * @memberof Campaign
     */
    config: CampaignConfig;
    /**
     * 
     * @type {EntityStatus}
     * @memberof Campaign
     */
    status: EntityStatus;
    /**
     * 
     * @type {number}
     * @memberof Campaign
     */
    id: number;
    /**
     * 
     * @type {Array<Template>}
     * @memberof Campaign
     */
    templates?: Array<Template>;
}
/**
 * 
 * @export
 * @interface CampaignAllOf
 */
export interface CampaignAllOf {
    /**
     * 
     * @type {number}
     * @memberof CampaignAllOf
     */
    id: number;
    /**
     * 
     * @type {Array<Template>}
     * @memberof CampaignAllOf
     */
    templates?: Array<Template>;
}
/**
 * 
 * @export
 * @interface CampaignConfig
 */
export interface CampaignConfig {
    /**
     * 
     * @type {string}
     * @memberof CampaignConfig
     */
    templateTransition?: string;
    /**
     * 
     * @type {number}
     * @memberof CampaignConfig
     */
    templateDurationSec?: number;
}
/**
 * 
 * @export
 * @interface CampaignRequest
 */
export interface CampaignRequest {
    /**
     * 
     * @type {string}
     * @memberof CampaignRequest
     */
    name: string;
    /**
     * 
     * @type {CampaignConfig}
     * @memberof CampaignRequest
     */
    config: CampaignConfig;
    /**
     * 
     * @type {EntityStatus}
     * @memberof CampaignRequest
     */
    status?: EntityStatus;
}
/**
 * 
 * @export
 * @interface Category
 */
export interface Category {
    /**
     * 
     * @type {number}
     * @memberof Category
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    description?: string;
    /**
     * 
     * @type {EntityStatus}
     * @memberof Category
     */
    status: EntityStatus;
    /**
     * 
     * @type {MediaAsset}
     * @memberof Category
     */
    picture?: MediaAsset;
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    creationDate: string;
}
/**
 * 
 * @export
 * @interface ChangePassword
 */
export interface ChangePassword {
    /**
     * 
     * @type {string}
     * @memberof ChangePassword
     */
    password: string;
}
/**
 * mainly used currencies
 * @export
 * @enum {string}
 */
export enum Currency {
    NIS = 'NIS',
    DOLLAR = 'DOLLAR',
    EURO = 'EURO'
}

/**
 * 
 * @export
 * @interface EntityID
 */
export interface EntityID {
    /**
     * The identifier of the entity
     * @type {number}
     * @memberof EntityID
     */
    id: number;
}
/**
 * Templates lifecycle.
 * @export
 * @enum {string}
 */
export enum EntityStatus {
    PUBLISH = 'PUBLISH',
    DRAFT = 'DRAFT',
    PENDING = 'PENDING',
    ARCHIVE = 'ARCHIVE',
    DELETE = 'DELETE'
}

/**
 * 
 * @export
 * @interface ErrorPayload
 */
export interface ErrorPayload {
    /**
     * The detailed error message
     * @type {string}
     * @memberof ErrorPayload
     */
    errorMessage: string;
    /**
     * The HTTP equivalent error code for the error.
     * @type {number}
     * @memberof ErrorPayload
     */
    httpErrorCode: number;
    /**
     * The unique session id assigned to each thrown error as part of the span
     * @type {string}
     * @memberof ErrorPayload
     */
    sessionId: string;
    /**
     * the time of the error in milis
     * @type {number}
     * @memberof ErrorPayload
     */
    timestamp: number;
    /**
     * URL redicrection after error
     * @type {string}
     * @memberof ErrorPayload
     */
    redirect?: string;
}
/**
 * 
 * @export
 * @interface InlineObject
 */
export interface InlineObject {
    /**
     * 
     * @type {any}
     * @memberof InlineObject
     */
    file: any;
    /**
     * 
     * @type {MediaClassification}
     * @memberof InlineObject
     */
    classification: MediaClassification;
    /**
     * 
     * @type {MediaAttribution}
     * @memberof InlineObject
     */
    attribution?: MediaAttribution;
}
/**
 * 
 * @export
 * @interface InlineObject1
 */
export interface InlineObject1 {
    /**
     * 
     * @type {any}
     * @memberof InlineObject1
     */
    file?: any;
}
/**
 * 
 * @export
 * @interface InlineObject2
 */
export interface InlineObject2 {
    /**
     * 
     * @type {string}
     * @memberof InlineObject2
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject2
     */
    description?: string;
    /**
     * 
     * @type {any}
     * @memberof InlineObject2
     */
    picture?: any;
}
/**
 * 
 * @export
 * @interface InlineObject3
 */
export interface InlineObject3 {
    /**
     * 
     * @type {string}
     * @memberof InlineObject3
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject3
     */
    description?: string;
    /**
     * 
     * @type {any}
     * @memberof InlineObject3
     */
    picture?: any;
    /**
     * 
     * @type {EntityStatus}
     * @memberof InlineObject3
     */
    status?: EntityStatus;
}
/**
 * 
 * @export
 * @interface InlineObject4
 */
export interface InlineObject4 {
    /**
     * 
     * @type {any}
     * @memberof InlineObject4
     */
    file?: any;
}
/**
 * 
 * @export
 * @interface LoginPassword
 */
export interface LoginPassword {
    /**
     * 
     * @type {string}
     * @memberof LoginPassword
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof LoginPassword
     */
    password: string;
}
/**
 * 
 * @export
 * @interface MediaAsset
 */
export interface MediaAsset {
    /**
     * 
     * @type {number}
     * @memberof MediaAsset
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof MediaAsset
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof MediaAsset
     */
    url: string;
    /**
     * 
     * @type {string}
     * @memberof MediaAsset
     */
    urlMinimized: string;
    /**
     * 
     * @type {number}
     * @memberof MediaAsset
     */
    sizeKb?: number;
    /**
     * 
     * @type {string}
     * @memberof MediaAsset
     */
    creationDate?: string;
    /**
     * 
     * @type {string}
     * @memberof MediaAsset
     */
    updateDate: string;
    /**
     * 
     * @type {MediaAttribution}
     * @memberof MediaAsset
     */
    attribution?: MediaAttribution;
}
/**
 * 
 * @export
 * @interface MediaAttribution
 */
export interface MediaAttribution {
    /**
     * 
     * @type {string}
     * @memberof MediaAttribution
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof MediaAttribution
     */
    author?: string;
    /**
     * 
     * @type {string}
     * @memberof MediaAttribution
     */
    authorUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof MediaAttribution
     */
    source?: string;
    /**
     * 
     * @type {string}
     * @memberof MediaAttribution
     */
    sourceUrl?: string;
    /**
     * 
     * @type {MediaLicense}
     * @memberof MediaAttribution
     */
    license?: MediaLicense;
}
/**
 * Classification information about the media asset
 * @export
 * @enum {string}
 */
export enum MediaClassification {
    BACKGROUND = 'BACKGROUND',
    STICKER = 'STICKER',
    LOGO = 'LOGO',
    VIDEO = 'VIDEO',
    PRODUCT = 'PRODUCT',
    CATEGORY = 'CATEGORY'
}

/**
 * 
 * @export
 * @interface MediaLicense
 */
export interface MediaLicense {
    /**
     * 
     * @type {number}
     * @memberof MediaLicense
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof MediaLicense
     */
    licenseName?: string;
    /**
     * 
     * @type {string}
     * @memberof MediaLicense
     */
    licenseUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof MediaLicense
     */
    copyright?: string;
}
/**
 * 
 * @export
 * @interface Product
 */
export interface Product {
    /**
     * 
     * @type {number}
     * @memberof Product
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof Product
     */
    price: number;
    /**
     * 
     * @type {object}
     * @memberof Product
     */
    details?: object;
    /**
     * 
     * @type {MediaAsset}
     * @memberof Product
     */
    defaultMedia: MediaAsset;
    /**
     * 
     * @type {EntityStatus}
     * @memberof Product
     */
    status: EntityStatus;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    creationDate: string;
}
/**
 * 
 * @export
 * @interface ProductRequest
 */
export interface ProductRequest {
    /**
     * 
     * @type {string}
     * @memberof ProductRequest
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof ProductRequest
     */
    price?: number;
    /**
     * 
     * @type {object}
     * @memberof ProductRequest
     */
    details?: object;
    /**
     * 
     * @type {EntityID}
     * @memberof ProductRequest
     */
    defaultMediaRef?: EntityID;
    /**
     * 
     * @type {EntityStatus}
     * @memberof ProductRequest
     */
    status?: EntityStatus;
}
/**
 * 
 * @export
 * @interface PublicationProfile
 */
export interface PublicationProfile {
    /**
     * 
     * @type {number}
     * @memberof PublicationProfile
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof PublicationProfile
     */
    name: string;
    /**
     * 
     * @type {Category}
     * @memberof PublicationProfile
     */
    category: Category;
    /**
     * 
     * @type {object}
     * @memberof PublicationProfile
     */
    location?: object;
    /**
     * 
     * @type {Template}
     * @memberof PublicationProfile
     */
    defaultTheme?: Template;
    /**
     * 
     * @type {MediaAsset}
     * @memberof PublicationProfile
     */
    logo: MediaAsset;
    /**
     * 
     * @type {Currency}
     * @memberof PublicationProfile
     */
    currency: Currency;
}
/**
 * 
 * @export
 * @interface PublicationProfileRequest
 */
export interface PublicationProfileRequest {
    /**
     * 
     * @type {string}
     * @memberof PublicationProfileRequest
     */
    name: string;
    /**
     * 
     * @type {EntityID}
     * @memberof PublicationProfileRequest
     */
    category: EntityID;
    /**
     * 
     * @type {object}
     * @memberof PublicationProfileRequest
     */
    location?: object;
    /**
     * 
     * @type {EntityID}
     * @memberof PublicationProfileRequest
     */
    defaultTheme?: EntityID;
    /**
     * 
     * @type {EntityID}
     * @memberof PublicationProfileRequest
     */
    logo: EntityID;
    /**
     * 
     * @type {Currency}
     * @memberof PublicationProfileRequest
     */
    currency: Currency;
}
/**
 * Resource entity types
 * @export
 * @enum {string}
 */
export enum ResourceType {
    TEMPLATE = 'TEMPLATE',
    THEME = 'THEME',
    PRODUCT = 'PRODUCT',
    MEDIA = 'MEDIA'
}

/**
 * 
 * @export
 * @interface StreamingDevice
 */
export interface StreamingDevice {
    /**
     * 
     * @type {string}
     * @memberof StreamingDevice
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof StreamingDevice
     */
    label: string;
    /**
     * 
     * @type {number}
     * @memberof StreamingDevice
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof StreamingDevice
     */
    uniqueId?: string;
    /**
     * 
     * @type {string}
     * @memberof StreamingDevice
     */
    serialNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof StreamingDevice
     */
    manufacturer?: string;
    /**
     * 
     * @type {string}
     * @memberof StreamingDevice
     */
    model?: string;
    /**
     * 
     * @type {string}
     * @memberof StreamingDevice
     */
    installedBuildVersion?: string;
    /**
     * 
     * @type {string}
     * @memberof StreamingDevice
     */
    osVersion?: string;
    /**
     * 
     * @type {string}
     * @memberof StreamingDevice
     */
    sdkVersion?: string;
    /**
     * 
     * @type {string}
     * @memberof StreamingDevice
     */
    lastUpdateRequest?: string;
}
/**
 * 
 * @export
 * @interface StreamingDeviceAllOf
 */
export interface StreamingDeviceAllOf {
    /**
     * 
     * @type {number}
     * @memberof StreamingDeviceAllOf
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof StreamingDeviceAllOf
     */
    uniqueId?: string;
    /**
     * 
     * @type {string}
     * @memberof StreamingDeviceAllOf
     */
    serialNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof StreamingDeviceAllOf
     */
    manufacturer?: string;
    /**
     * 
     * @type {string}
     * @memberof StreamingDeviceAllOf
     */
    model?: string;
    /**
     * 
     * @type {string}
     * @memberof StreamingDeviceAllOf
     */
    installedBuildVersion?: string;
    /**
     * 
     * @type {string}
     * @memberof StreamingDeviceAllOf
     */
    osVersion?: string;
    /**
     * 
     * @type {string}
     * @memberof StreamingDeviceAllOf
     */
    sdkVersion?: string;
    /**
     * 
     * @type {string}
     * @memberof StreamingDeviceAllOf
     */
    lastUpdateRequest?: string;
}
/**
 * 
 * @export
 * @interface StreamingDeviceRequest
 */
export interface StreamingDeviceRequest {
    /**
     * 
     * @type {string}
     * @memberof StreamingDeviceRequest
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof StreamingDeviceRequest
     */
    label: string;
}
/**
 * 
 * @export
 * @interface Template
 */
export interface Template {
    /**
     * 
     * @type {string}
     * @memberof Template
     */
    name: string;
    /**
     * 
     * @type {object}
     * @memberof Template
     */
    content: object;
    /**
     * 
     * @type {TemplateContentType}
     * @memberof Template
     */
    contentType: TemplateContentType;
    /**
     * 
     * @type {EntityStatus}
     * @memberof Template
     */
    status: EntityStatus;
    /**
     * 
     * @type {number}
     * @memberof Template
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof Template
     */
    creationDate: string;
    /**
     * 
     * @type {string}
     * @memberof Template
     */
    updateDate: string;
}
/**
 * 
 * @export
 * @interface TemplateAllOf
 */
export interface TemplateAllOf {
    /**
     * 
     * @type {number}
     * @memberof TemplateAllOf
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof TemplateAllOf
     */
    creationDate: string;
    /**
     * 
     * @type {string}
     * @memberof TemplateAllOf
     */
    updateDate: string;
}
/**
 * Templates content type.
 * @export
 * @enum {string}
 */
export enum TemplateContentType {
    TEMPLATE = 'TEMPLATE',
    THEME = 'THEME',
    LAYOUT = 'LAYOUT'
}

/**
 * 
 * @export
 * @interface TemplateMetadata
 */
export interface TemplateMetadata {
    /**
     * 
     * @type {{ [key: string]: Template; }}
     * @memberof TemplateMetadata
     */
    themes?: { [key: string]: Template; };
    /**
     * 
     * @type {{ [key: string]: Product; }}
     * @memberof TemplateMetadata
     */
    products?: { [key: string]: Product; };
    /**
     * 
     * @type {{ [key: string]: MediaAsset; }}
     * @memberof TemplateMetadata
     */
    media?: { [key: string]: MediaAsset; };
}
/**
 * 
 * @export
 * @interface TemplateReference
 */
export interface TemplateReference {
    /**
     * 
     * @type {ResourceType}
     * @memberof TemplateReference
     */
    kind: ResourceType;
    /**
     * 
     * @type {number}
     * @memberof TemplateReference
     */
    id: number;
}
/**
 * 
 * @export
 * @interface TemplateRequest
 */
export interface TemplateRequest {
    /**
     * 
     * @type {string}
     * @memberof TemplateRequest
     */
    name: string;
    /**
     * 
     * @type {object}
     * @memberof TemplateRequest
     */
    content: object;
    /**
     * 
     * @type {TemplateContentType}
     * @memberof TemplateRequest
     */
    contentType: TemplateContentType;
    /**
     * 
     * @type {EntityStatus}
     * @memberof TemplateRequest
     */
    status?: EntityStatus;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    userName: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    phone?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    language?: string;
}
/**
 * 
 * @export
 * @interface UserSignup
 */
export interface UserSignup {
    /**
     * 
     * @type {string}
     * @memberof UserSignup
     */
    userName?: string;
    /**
     * 
     * @type {string}
     * @memberof UserSignup
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof UserSignup
     */
    password?: string;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum UserStatus {
    ACTIVATIONREQUIRED = 'ACTIVATION_REQUIRED',
    KYCREQUIRED = 'KYC_REQUIRED',
    ACTIVE = 'ACTIVE',
    SUSPENDED = 'SUSPENDED'
}

/**
 * 
 * @export
 * @interface UserToken
 */
export interface UserToken {
    /**
     * 
     * @type {string}
     * @memberof UserToken
     */
    token: string;
    /**
     * 
     * @type {string}
     * @memberof UserToken
     */
    redirect?: string;
}
/**
 * Asset visibility
 * @export
 * @enum {string}
 */
export enum Visibility {
    USER = 'USER',
    PLATFORM = 'PLATFORM'
}


/**
 * CampaignApi - axios parameter creator
 * @export
 */
export const CampaignApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new campaign
         * @param {CampaignRequest} campaignRequest &lt;b&gt;Unique&lt;/b&gt; campaign#name &amp; author (derived from token) \\n
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCampaign(campaignRequest: CampaignRequest, options: any = {}): RequestArgs {
            // verify required parameter 'campaignRequest' is not null or undefined
            if (campaignRequest === null || campaignRequest === undefined) {
                throw new RequiredError('campaignRequest','Required parameter campaignRequest was null or undefined when calling createCampaign.');
            }
            const localVarPath = `/campaign`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof campaignRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(campaignRequest !== undefined ? campaignRequest : {}) : (campaignRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete campaign by id
         * @param {number} id the id of the campaign to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCampaign(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteCampaign.');
            }
            const localVarPath = `/campaign/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get campaign by id
         * @param {number} id the id of the campaign to fetch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCampaignById(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getCampaignById.');
            }
            const localVarPath = `/campaign/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all user campaigns
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserCampaigns(options: any = {}): RequestArgs {
            const localVarPath = `/campaign/items`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update campaign by id
         * @param {number} id the id of the campaign to update (idempotent)
         * @param {CampaignRequest} campaignRequest &lt;b&gt;Mandatory&lt;/b&gt; campaign#name, campaign#config \\n &lt;b&gt;Unique&lt;/b&gt; campaign#name &amp; author (derived from token) \\n
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCampaignById(id: number, campaignRequest: CampaignRequest, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateCampaignById.');
            }
            // verify required parameter 'campaignRequest' is not null or undefined
            if (campaignRequest === null || campaignRequest === undefined) {
                throw new RequiredError('campaignRequest','Required parameter campaignRequest was null or undefined when calling updateCampaignById.');
            }
            const localVarPath = `/campaign/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof campaignRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(campaignRequest !== undefined ? campaignRequest : {}) : (campaignRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update campaign templates (idempotent)
         * @param {number} id 
         * @param {Array<EntityID>} entityID List of Template#id (overrides the previous templates)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCampaignTemplates(id: number, entityID: Array<EntityID>, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateCampaignTemplates.');
            }
            // verify required parameter 'entityID' is not null or undefined
            if (entityID === null || entityID === undefined) {
                throw new RequiredError('entityID','Required parameter entityID was null or undefined when calling updateCampaignTemplates.');
            }
            const localVarPath = `/campaign/{id}/templates`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof entityID !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(entityID !== undefined ? entityID : {}) : (entityID || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CampaignApi - functional programming interface
 * @export
 */
export const CampaignApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new campaign
         * @param {CampaignRequest} campaignRequest &lt;b&gt;Unique&lt;/b&gt; campaign#name &amp; author (derived from token) \\n
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCampaign(campaignRequest: CampaignRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Campaign> {
            const localVarAxiosArgs = CampaignApiAxiosParamCreator(configuration).createCampaign(campaignRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Delete campaign by id
         * @param {number} id the id of the campaign to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCampaign(id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = CampaignApiAxiosParamCreator(configuration).deleteCampaign(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get campaign by id
         * @param {number} id the id of the campaign to fetch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCampaignById(id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Campaign> {
            const localVarAxiosArgs = CampaignApiAxiosParamCreator(configuration).getCampaignById(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get all user campaigns
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserCampaigns(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Campaign>> {
            const localVarAxiosArgs = CampaignApiAxiosParamCreator(configuration).getUserCampaigns(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Update campaign by id
         * @param {number} id the id of the campaign to update (idempotent)
         * @param {CampaignRequest} campaignRequest &lt;b&gt;Mandatory&lt;/b&gt; campaign#name, campaign#config \\n &lt;b&gt;Unique&lt;/b&gt; campaign#name &amp; author (derived from token) \\n
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCampaignById(id: number, campaignRequest: CampaignRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Campaign> {
            const localVarAxiosArgs = CampaignApiAxiosParamCreator(configuration).updateCampaignById(id, campaignRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Update campaign templates (idempotent)
         * @param {number} id 
         * @param {Array<EntityID>} entityID List of Template#id (overrides the previous templates)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCampaignTemplates(id: number, entityID: Array<EntityID>, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = CampaignApiAxiosParamCreator(configuration).updateCampaignTemplates(id, entityID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * CampaignApi - factory interface
 * @export
 */
export const CampaignApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Create a new campaign
         * @param {CampaignRequest} campaignRequest &lt;b&gt;Unique&lt;/b&gt; campaign#name &amp; author (derived from token) \\n
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCampaign(campaignRequest: CampaignRequest, options?: any) {
            return CampaignApiFp(configuration).createCampaign(campaignRequest, options)(axios, basePath);
        },
        /**
         * 
         * @summary Delete campaign by id
         * @param {number} id the id of the campaign to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCampaign(id: number, options?: any) {
            return CampaignApiFp(configuration).deleteCampaign(id, options)(axios, basePath);
        },
        /**
         * 
         * @summary Get campaign by id
         * @param {number} id the id of the campaign to fetch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCampaignById(id: number, options?: any) {
            return CampaignApiFp(configuration).getCampaignById(id, options)(axios, basePath);
        },
        /**
         * 
         * @summary Get all user campaigns
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserCampaigns(options?: any) {
            return CampaignApiFp(configuration).getUserCampaigns(options)(axios, basePath);
        },
        /**
         * 
         * @summary Update campaign by id
         * @param {number} id the id of the campaign to update (idempotent)
         * @param {CampaignRequest} campaignRequest &lt;b&gt;Mandatory&lt;/b&gt; campaign#name, campaign#config \\n &lt;b&gt;Unique&lt;/b&gt; campaign#name &amp; author (derived from token) \\n
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCampaignById(id: number, campaignRequest: CampaignRequest, options?: any) {
            return CampaignApiFp(configuration).updateCampaignById(id, campaignRequest, options)(axios, basePath);
        },
        /**
         * 
         * @summary Update campaign templates (idempotent)
         * @param {number} id 
         * @param {Array<EntityID>} entityID List of Template#id (overrides the previous templates)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCampaignTemplates(id: number, entityID: Array<EntityID>, options?: any) {
            return CampaignApiFp(configuration).updateCampaignTemplates(id, entityID, options)(axios, basePath);
        },
    };
};

/**
 * CampaignApi - object-oriented interface
 * @export
 * @class CampaignApi
 * @extends {BaseAPI}
 */
export class CampaignApi extends BaseAPI {
    /**
     * 
     * @summary Create a new campaign
     * @param {CampaignRequest} campaignRequest &lt;b&gt;Unique&lt;/b&gt; campaign#name &amp; author (derived from token) \\n
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignApi
     */
    public createCampaign(campaignRequest: CampaignRequest, options?: any) {
        return CampaignApiFp(this.configuration).createCampaign(campaignRequest, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Delete campaign by id
     * @param {number} id the id of the campaign to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignApi
     */
    public deleteCampaign(id: number, options?: any) {
        return CampaignApiFp(this.configuration).deleteCampaign(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Get campaign by id
     * @param {number} id the id of the campaign to fetch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignApi
     */
    public getCampaignById(id: number, options?: any) {
        return CampaignApiFp(this.configuration).getCampaignById(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Get all user campaigns
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignApi
     */
    public getUserCampaigns(options?: any) {
        return CampaignApiFp(this.configuration).getUserCampaigns(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Update campaign by id
     * @param {number} id the id of the campaign to update (idempotent)
     * @param {CampaignRequest} campaignRequest &lt;b&gt;Mandatory&lt;/b&gt; campaign#name, campaign#config \\n &lt;b&gt;Unique&lt;/b&gt; campaign#name &amp; author (derived from token) \\n
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignApi
     */
    public updateCampaignById(id: number, campaignRequest: CampaignRequest, options?: any) {
        return CampaignApiFp(this.configuration).updateCampaignById(id, campaignRequest, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Update campaign templates (idempotent)
     * @param {number} id 
     * @param {Array<EntityID>} entityID List of Template#id (overrides the previous templates)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignApi
     */
    public updateCampaignTemplates(id: number, entityID: Array<EntityID>, options?: any) {
        return CampaignApiFp(this.configuration).updateCampaignTemplates(id, entityID, options)(this.axios, this.basePath);
    }

}


/**
 * CategoryApi - axios parameter creator
 * @export
 */
export const CategoryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new category
         * @param {string} [name] 
         * @param {string} [description] 
         * @param {any} [picture] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCategory(name?: string, description?: string, picture?: any, options: any = {}): RequestArgs {
            const localVarPath = `/category`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


            if (name !== undefined) { 
                localVarFormParams.append('name', name as any);
            }
    
            if (description !== undefined) { 
                localVarFormParams.append('description', description as any);
            }
    
            if (picture !== undefined) { 
                localVarFormParams.append('picture', picture as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete an existing category
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCategory(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteCategory.');
            }
            const localVarPath = `/category/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCategories(options: any = {}): RequestArgs {
            const localVarPath = `/category/items`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get category by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategoryById(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getCategoryById.');
            }
            const localVarPath = `/category/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing category
         * @param {number} id 
         * @param {string} [name] 
         * @param {string} [description] 
         * @param {any} [picture] 
         * @param {EntityStatus} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCategory(id: number, name?: string, description?: string, picture?: any, status?: EntityStatus, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateCategory.');
            }
            const localVarPath = `/category/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


            if (name !== undefined) { 
                localVarFormParams.append('name', name as any);
            }
    
            if (description !== undefined) { 
                localVarFormParams.append('description', description as any);
            }
    
            if (picture !== undefined) { 
                localVarFormParams.append('picture', picture as any);
            }
    
            if (status !== undefined) { 
                localVarFormParams.append('status', status as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CategoryApi - functional programming interface
 * @export
 */
export const CategoryApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new category
         * @param {string} [name] 
         * @param {string} [description] 
         * @param {any} [picture] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCategory(name?: string, description?: string, picture?: any, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = CategoryApiAxiosParamCreator(configuration).createCategory(name, description, picture, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Delete an existing category
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCategory(id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = CategoryApiAxiosParamCreator(configuration).deleteCategory(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get all categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCategories(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Category>> {
            const localVarAxiosArgs = CategoryApiAxiosParamCreator(configuration).getAllCategories(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get category by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategoryById(id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Category> {
            const localVarAxiosArgs = CategoryApiAxiosParamCreator(configuration).getCategoryById(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Update an existing category
         * @param {number} id 
         * @param {string} [name] 
         * @param {string} [description] 
         * @param {any} [picture] 
         * @param {EntityStatus} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCategory(id: number, name?: string, description?: string, picture?: any, status?: EntityStatus, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Category> {
            const localVarAxiosArgs = CategoryApiAxiosParamCreator(configuration).updateCategory(id, name, description, picture, status, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * CategoryApi - factory interface
 * @export
 */
export const CategoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Create a new category
         * @param {string} [name] 
         * @param {string} [description] 
         * @param {any} [picture] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCategory(name?: string, description?: string, picture?: any, options?: any) {
            return CategoryApiFp(configuration).createCategory(name, description, picture, options)(axios, basePath);
        },
        /**
         * 
         * @summary Delete an existing category
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCategory(id: number, options?: any) {
            return CategoryApiFp(configuration).deleteCategory(id, options)(axios, basePath);
        },
        /**
         * 
         * @summary Get all categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCategories(options?: any) {
            return CategoryApiFp(configuration).getAllCategories(options)(axios, basePath);
        },
        /**
         * 
         * @summary Get category by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategoryById(id: number, options?: any) {
            return CategoryApiFp(configuration).getCategoryById(id, options)(axios, basePath);
        },
        /**
         * 
         * @summary Update an existing category
         * @param {number} id 
         * @param {string} [name] 
         * @param {string} [description] 
         * @param {any} [picture] 
         * @param {EntityStatus} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCategory(id: number, name?: string, description?: string, picture?: any, status?: EntityStatus, options?: any) {
            return CategoryApiFp(configuration).updateCategory(id, name, description, picture, status, options)(axios, basePath);
        },
    };
};

/**
 * CategoryApi - object-oriented interface
 * @export
 * @class CategoryApi
 * @extends {BaseAPI}
 */
export class CategoryApi extends BaseAPI {
    /**
     * 
     * @summary Create a new category
     * @param {string} [name] 
     * @param {string} [description] 
     * @param {any} [picture] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public createCategory(name?: string, description?: string, picture?: any, options?: any) {
        return CategoryApiFp(this.configuration).createCategory(name, description, picture, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Delete an existing category
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public deleteCategory(id: number, options?: any) {
        return CategoryApiFp(this.configuration).deleteCategory(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Get all categories
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public getAllCategories(options?: any) {
        return CategoryApiFp(this.configuration).getAllCategories(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Get category by id
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public getCategoryById(id: number, options?: any) {
        return CategoryApiFp(this.configuration).getCategoryById(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Update an existing category
     * @param {number} id 
     * @param {string} [name] 
     * @param {string} [description] 
     * @param {any} [picture] 
     * @param {EntityStatus} [status] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public updateCategory(id: number, name?: string, description?: string, picture?: any, status?: EntityStatus, options?: any) {
        return CategoryApiFp(this.configuration).updateCategory(id, name, description, picture, status, options)(this.axios, this.basePath);
    }

}


/**
 * DeviceApi - axios parameter creator
 * @export
 */
export const DeviceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new device
         * @param {StreamingDeviceRequest} streamingDeviceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDevice(streamingDeviceRequest: StreamingDeviceRequest, options: any = {}): RequestArgs {
            // verify required parameter 'streamingDeviceRequest' is not null or undefined
            if (streamingDeviceRequest === null || streamingDeviceRequest === undefined) {
                throw new RequiredError('streamingDeviceRequest','Required parameter streamingDeviceRequest was null or undefined when calling createDevice.');
            }
            const localVarPath = `/device`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof streamingDeviceRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(streamingDeviceRequest !== undefined ? streamingDeviceRequest : {}) : (streamingDeviceRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * delete device
         * @summary Delete device
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDevice(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteDevice.');
            }
            const localVarPath = `/device/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all devices
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllDevices(options: any = {}): RequestArgs {
            const localVarPath = `/device/items`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get device campaigns
         * @param {number} id the id of the device to fetch its campaigns (idempotent)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeviceCampaigns(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getDeviceCampaigns.');
            }
            const localVarPath = `/device/{id}/campaigns`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update device by id
         * @param {number} id the id of the device to update (idempotent)
         * @param {StreamingDeviceRequest} streamingDeviceRequest provides all the information about the actual streaming device
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDeviceById(id: number, streamingDeviceRequest: StreamingDeviceRequest, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateDeviceById.');
            }
            // verify required parameter 'streamingDeviceRequest' is not null or undefined
            if (streamingDeviceRequest === null || streamingDeviceRequest === undefined) {
                throw new RequiredError('streamingDeviceRequest','Required parameter streamingDeviceRequest was null or undefined when calling updateDeviceById.');
            }
            const localVarPath = `/device/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof streamingDeviceRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(streamingDeviceRequest !== undefined ? streamingDeviceRequest : {}) : (streamingDeviceRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update device campaigns
         * @param {number} id the id of the device to update (idempotent)
         * @param {Array<Campaign>} campaign campaigns related to the device
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDeviceCampaigns(id: number, campaign: Array<Campaign>, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateDeviceCampaigns.');
            }
            // verify required parameter 'campaign' is not null or undefined
            if (campaign === null || campaign === undefined) {
                throw new RequiredError('campaign','Required parameter campaign was null or undefined when calling updateDeviceCampaigns.');
            }
            const localVarPath = `/device/{id}/campaigns`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof campaign !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(campaign !== undefined ? campaign : {}) : (campaign || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DeviceApi - functional programming interface
 * @export
 */
export const DeviceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new device
         * @param {StreamingDeviceRequest} streamingDeviceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDevice(streamingDeviceRequest: StreamingDeviceRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<StreamingDevice> {
            const localVarAxiosArgs = DeviceApiAxiosParamCreator(configuration).createDevice(streamingDeviceRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * delete device
         * @summary Delete device
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDevice(id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = DeviceApiAxiosParamCreator(configuration).deleteDevice(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get all devices
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllDevices(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<StreamingDevice>> {
            const localVarAxiosArgs = DeviceApiAxiosParamCreator(configuration).getAllDevices(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get device campaigns
         * @param {number} id the id of the device to fetch its campaigns (idempotent)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeviceCampaigns(id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Campaign>> {
            const localVarAxiosArgs = DeviceApiAxiosParamCreator(configuration).getDeviceCampaigns(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Update device by id
         * @param {number} id the id of the device to update (idempotent)
         * @param {StreamingDeviceRequest} streamingDeviceRequest provides all the information about the actual streaming device
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDeviceById(id: number, streamingDeviceRequest: StreamingDeviceRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<StreamingDevice> {
            const localVarAxiosArgs = DeviceApiAxiosParamCreator(configuration).updateDeviceById(id, streamingDeviceRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Update device campaigns
         * @param {number} id the id of the device to update (idempotent)
         * @param {Array<Campaign>} campaign campaigns related to the device
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDeviceCampaigns(id: number, campaign: Array<Campaign>, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<StreamingDevice> {
            const localVarAxiosArgs = DeviceApiAxiosParamCreator(configuration).updateDeviceCampaigns(id, campaign, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DeviceApi - factory interface
 * @export
 */
export const DeviceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Create a new device
         * @param {StreamingDeviceRequest} streamingDeviceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDevice(streamingDeviceRequest: StreamingDeviceRequest, options?: any) {
            return DeviceApiFp(configuration).createDevice(streamingDeviceRequest, options)(axios, basePath);
        },
        /**
         * delete device
         * @summary Delete device
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDevice(id: number, options?: any) {
            return DeviceApiFp(configuration).deleteDevice(id, options)(axios, basePath);
        },
        /**
         * 
         * @summary Get all devices
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllDevices(options?: any) {
            return DeviceApiFp(configuration).getAllDevices(options)(axios, basePath);
        },
        /**
         * 
         * @summary Get device campaigns
         * @param {number} id the id of the device to fetch its campaigns (idempotent)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeviceCampaigns(id: number, options?: any) {
            return DeviceApiFp(configuration).getDeviceCampaigns(id, options)(axios, basePath);
        },
        /**
         * 
         * @summary Update device by id
         * @param {number} id the id of the device to update (idempotent)
         * @param {StreamingDeviceRequest} streamingDeviceRequest provides all the information about the actual streaming device
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDeviceById(id: number, streamingDeviceRequest: StreamingDeviceRequest, options?: any) {
            return DeviceApiFp(configuration).updateDeviceById(id, streamingDeviceRequest, options)(axios, basePath);
        },
        /**
         * 
         * @summary Update device campaigns
         * @param {number} id the id of the device to update (idempotent)
         * @param {Array<Campaign>} campaign campaigns related to the device
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDeviceCampaigns(id: number, campaign: Array<Campaign>, options?: any) {
            return DeviceApiFp(configuration).updateDeviceCampaigns(id, campaign, options)(axios, basePath);
        },
    };
};

/**
 * DeviceApi - object-oriented interface
 * @export
 * @class DeviceApi
 * @extends {BaseAPI}
 */
export class DeviceApi extends BaseAPI {
    /**
     * 
     * @summary Create a new device
     * @param {StreamingDeviceRequest} streamingDeviceRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    public createDevice(streamingDeviceRequest: StreamingDeviceRequest, options?: any) {
        return DeviceApiFp(this.configuration).createDevice(streamingDeviceRequest, options)(this.axios, this.basePath);
    }

    /**
     * delete device
     * @summary Delete device
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    public deleteDevice(id: number, options?: any) {
        return DeviceApiFp(this.configuration).deleteDevice(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Get all devices
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    public getAllDevices(options?: any) {
        return DeviceApiFp(this.configuration).getAllDevices(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Get device campaigns
     * @param {number} id the id of the device to fetch its campaigns (idempotent)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    public getDeviceCampaigns(id: number, options?: any) {
        return DeviceApiFp(this.configuration).getDeviceCampaigns(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Update device by id
     * @param {number} id the id of the device to update (idempotent)
     * @param {StreamingDeviceRequest} streamingDeviceRequest provides all the information about the actual streaming device
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    public updateDeviceById(id: number, streamingDeviceRequest: StreamingDeviceRequest, options?: any) {
        return DeviceApiFp(this.configuration).updateDeviceById(id, streamingDeviceRequest, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Update device campaigns
     * @param {number} id the id of the device to update (idempotent)
     * @param {Array<Campaign>} campaign campaigns related to the device
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    public updateDeviceCampaigns(id: number, campaign: Array<Campaign>, options?: any) {
        return DeviceApiFp(this.configuration).updateDeviceCampaigns(id, campaign, options)(this.axios, this.basePath);
    }

}


/**
 * LicenseApi - axios parameter creator
 * @export
 */
export const LicenseApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary create new media license
         * @param {MediaLicense} mediaLicense 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLicense(mediaLicense: MediaLicense, options: any = {}): RequestArgs {
            // verify required parameter 'mediaLicense' is not null or undefined
            if (mediaLicense === null || mediaLicense === undefined) {
                throw new RequiredError('mediaLicense','Required parameter mediaLicense was null or undefined when calling createLicense.');
            }
            const localVarPath = `/license`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof mediaLicense !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(mediaLicense !== undefined ? mediaLicense : {}) : (mediaLicense || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * delete license
         * @summary Delete license
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLicense(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteLicense.');
            }
            const localVarPath = `/license/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all licenses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLicenses(options: any = {}): RequestArgs {
            const localVarPath = `/license`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LicenseApi - functional programming interface
 * @export
 */
export const LicenseApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary create new media license
         * @param {MediaLicense} mediaLicense 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLicense(mediaLicense: MediaLicense, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = LicenseApiAxiosParamCreator(configuration).createLicense(mediaLicense, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * delete license
         * @summary Delete license
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLicense(id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = LicenseApiAxiosParamCreator(configuration).deleteLicense(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get all licenses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLicenses(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MediaLicense>> {
            const localVarAxiosArgs = LicenseApiAxiosParamCreator(configuration).getLicenses(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * LicenseApi - factory interface
 * @export
 */
export const LicenseApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary create new media license
         * @param {MediaLicense} mediaLicense 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLicense(mediaLicense: MediaLicense, options?: any) {
            return LicenseApiFp(configuration).createLicense(mediaLicense, options)(axios, basePath);
        },
        /**
         * delete license
         * @summary Delete license
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLicense(id: number, options?: any) {
            return LicenseApiFp(configuration).deleteLicense(id, options)(axios, basePath);
        },
        /**
         * 
         * @summary Get all licenses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLicenses(options?: any) {
            return LicenseApiFp(configuration).getLicenses(options)(axios, basePath);
        },
    };
};

/**
 * LicenseApi - object-oriented interface
 * @export
 * @class LicenseApi
 * @extends {BaseAPI}
 */
export class LicenseApi extends BaseAPI {
    /**
     * 
     * @summary create new media license
     * @param {MediaLicense} mediaLicense 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LicenseApi
     */
    public createLicense(mediaLicense: MediaLicense, options?: any) {
        return LicenseApiFp(this.configuration).createLicense(mediaLicense, options)(this.axios, this.basePath);
    }

    /**
     * delete license
     * @summary Delete license
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LicenseApi
     */
    public deleteLicense(id: number, options?: any) {
        return LicenseApiFp(this.configuration).deleteLicense(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Get all licenses
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LicenseApi
     */
    public getLicenses(options?: any) {
        return LicenseApiFp(this.configuration).getLicenses(options)(this.axios, this.basePath);
    }

}


/**
 * MediaApi - axios parameter creator
 * @export
 */
export const MediaApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * elete media from storage and db
         * @summary Delete media
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMediaFile(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteMediaFile.');
            }
            const localVarPath = `/media/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Fetch media files from storage with pagination
         * @param {number} [page] page number to fetch. first page is one.
         * @param {number} [size] number of elements per page
         * @param {MediaClassification} [classification] 
         * @param {Visibility} [visibility] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMediaPaged(page?: number, size?: number, classification?: MediaClassification, visibility?: Visibility, options: any = {}): RequestArgs {
            const localVarPath = `/media/paged`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (classification !== undefined) {
                localVarQueryParameter['classification'] = classification;
            }

            if (visibility !== undefined) {
                localVarQueryParameter['visibility'] = visibility;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Import media from platform to user scope
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importPlatformMedia(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling importPlatformMedia.');
            }
            const localVarPath = `/media/{id}/import`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove the background of an image
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeImageBackground(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling removeImageBackground.');
            }
            const localVarPath = `/media/{id}/removebg`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing media entity with a new file
         * @param {number} id 
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMediaFile(id: number, file?: any, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateMediaFile.');
            }
            const localVarPath = `/media/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upload media file to storage
         * @param {any} file 
         * @param {MediaClassification} classification 
         * @param {MediaAttribution} [attribution] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFile(file: any, classification: MediaClassification, attribution?: MediaAttribution, options: any = {}): RequestArgs {
            // verify required parameter 'file' is not null or undefined
            if (file === null || file === undefined) {
                throw new RequiredError('file','Required parameter file was null or undefined when calling uploadFile.');
            }
            // verify required parameter 'classification' is not null or undefined
            if (classification === null || classification === undefined) {
                throw new RequiredError('classification','Required parameter classification was null or undefined when calling uploadFile.');
            }
            const localVarPath = `/media/upload`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
            if (classification !== undefined) { 
                localVarFormParams.append('classification', classification as any);
            }
    
            if (attribution !== undefined) { 
                localVarFormParams.append('attribution', attribution as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MediaApi - functional programming interface
 * @export
 */
export const MediaApiFp = function(configuration?: Configuration) {
    return {
        /**
         * elete media from storage and db
         * @summary Delete media
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMediaFile(id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = MediaApiAxiosParamCreator(configuration).deleteMediaFile(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Fetch media files from storage with pagination
         * @param {number} [page] page number to fetch. first page is one.
         * @param {number} [size] number of elements per page
         * @param {MediaClassification} [classification] 
         * @param {Visibility} [visibility] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMediaPaged(page?: number, size?: number, classification?: MediaClassification, visibility?: Visibility, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MediaAsset>> {
            const localVarAxiosArgs = MediaApiAxiosParamCreator(configuration).getMediaPaged(page, size, classification, visibility, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Import media from platform to user scope
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importPlatformMedia(id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<MediaAsset> {
            const localVarAxiosArgs = MediaApiAxiosParamCreator(configuration).importPlatformMedia(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Remove the background of an image
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeImageBackground(id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<MediaAsset> {
            const localVarAxiosArgs = MediaApiAxiosParamCreator(configuration).removeImageBackground(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Update an existing media entity with a new file
         * @param {number} id 
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMediaFile(id: number, file?: any, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<MediaAsset> {
            const localVarAxiosArgs = MediaApiAxiosParamCreator(configuration).updateMediaFile(id, file, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Upload media file to storage
         * @param {any} file 
         * @param {MediaClassification} classification 
         * @param {MediaAttribution} [attribution] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFile(file: any, classification: MediaClassification, attribution?: MediaAttribution, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<MediaAsset> {
            const localVarAxiosArgs = MediaApiAxiosParamCreator(configuration).uploadFile(file, classification, attribution, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * MediaApi - factory interface
 * @export
 */
export const MediaApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * elete media from storage and db
         * @summary Delete media
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMediaFile(id: number, options?: any) {
            return MediaApiFp(configuration).deleteMediaFile(id, options)(axios, basePath);
        },
        /**
         * 
         * @summary Fetch media files from storage with pagination
         * @param {number} [page] page number to fetch. first page is one.
         * @param {number} [size] number of elements per page
         * @param {MediaClassification} [classification] 
         * @param {Visibility} [visibility] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMediaPaged(page?: number, size?: number, classification?: MediaClassification, visibility?: Visibility, options?: any) {
            return MediaApiFp(configuration).getMediaPaged(page, size, classification, visibility, options)(axios, basePath);
        },
        /**
         * 
         * @summary Import media from platform to user scope
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importPlatformMedia(id: number, options?: any) {
            return MediaApiFp(configuration).importPlatformMedia(id, options)(axios, basePath);
        },
        /**
         * 
         * @summary Remove the background of an image
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeImageBackground(id: number, options?: any) {
            return MediaApiFp(configuration).removeImageBackground(id, options)(axios, basePath);
        },
        /**
         * 
         * @summary Update an existing media entity with a new file
         * @param {number} id 
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMediaFile(id: number, file?: any, options?: any) {
            return MediaApiFp(configuration).updateMediaFile(id, file, options)(axios, basePath);
        },
        /**
         * 
         * @summary Upload media file to storage
         * @param {any} file 
         * @param {MediaClassification} classification 
         * @param {MediaAttribution} [attribution] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFile(file: any, classification: MediaClassification, attribution?: MediaAttribution, options?: any) {
            return MediaApiFp(configuration).uploadFile(file, classification, attribution, options)(axios, basePath);
        },
    };
};

/**
 * MediaApi - object-oriented interface
 * @export
 * @class MediaApi
 * @extends {BaseAPI}
 */
export class MediaApi extends BaseAPI {
    /**
     * elete media from storage and db
     * @summary Delete media
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApi
     */
    public deleteMediaFile(id: number, options?: any) {
        return MediaApiFp(this.configuration).deleteMediaFile(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Fetch media files from storage with pagination
     * @param {number} [page] page number to fetch. first page is one.
     * @param {number} [size] number of elements per page
     * @param {MediaClassification} [classification] 
     * @param {Visibility} [visibility] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApi
     */
    public getMediaPaged(page?: number, size?: number, classification?: MediaClassification, visibility?: Visibility, options?: any) {
        return MediaApiFp(this.configuration).getMediaPaged(page, size, classification, visibility, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Import media from platform to user scope
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApi
     */
    public importPlatformMedia(id: number, options?: any) {
        return MediaApiFp(this.configuration).importPlatformMedia(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Remove the background of an image
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApi
     */
    public removeImageBackground(id: number, options?: any) {
        return MediaApiFp(this.configuration).removeImageBackground(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Update an existing media entity with a new file
     * @param {number} id 
     * @param {any} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApi
     */
    public updateMediaFile(id: number, file?: any, options?: any) {
        return MediaApiFp(this.configuration).updateMediaFile(id, file, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Upload media file to storage
     * @param {any} file 
     * @param {MediaClassification} classification 
     * @param {MediaAttribution} [attribution] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApi
     */
    public uploadFile(file: any, classification: MediaClassification, attribution?: MediaAttribution, options?: any) {
        return MediaApiFp(this.configuration).uploadFile(file, classification, attribution, options)(this.axios, this.basePath);
    }

}


/**
 * ProductApi - axios parameter creator
 * @export
 */
export const ProductApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add product media asset
         * @param {number} id product#id
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addProductMedia(id: number, file?: any, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling addProductMedia.');
            }
            const localVarPath = `/product/{id}/media`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new product
         * @param {ProductRequest} productRequest &lt;b&gt;Mandatory&lt;/b&gt; product#name, product#content \\n &lt;b&gt;Unique&lt;/b&gt; product#name &amp; author (derived from token) \\n
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProduct(productRequest: ProductRequest, options: any = {}): RequestArgs {
            // verify required parameter 'productRequest' is not null or undefined
            if (productRequest === null || productRequest === undefined) {
                throw new RequiredError('productRequest','Required parameter productRequest was null or undefined when calling createProduct.');
            }
            const localVarPath = `/product`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof productRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(productRequest !== undefined ? productRequest : {}) : (productRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete product by id
         * @param {number} id the id of the product to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProduct(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteProduct.');
            }
            const localVarPath = `/product/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete product media asset
         * @param {number} id 
         * @param {number} mediaId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProductMedia(id: number, mediaId: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteProductMedia.');
            }
            // verify required parameter 'mediaId' is not null or undefined
            if (mediaId === null || mediaId === undefined) {
                throw new RequiredError('mediaId','Required parameter mediaId was null or undefined when calling deleteProductMedia.');
            }
            const localVarPath = `/product/{id}/media/{mediaId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"mediaId"}}`, encodeURIComponent(String(mediaId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get product by id
         * @param {number} id the id of the product to fetch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductById(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getProductById.');
            }
            const localVarPath = `/product/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get product categories by product id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductCategoriesByProductId(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getProductCategoriesByProductId.');
            }
            const localVarPath = `/product/{id}/categories`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get product media files by product id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductMediaByProductId(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getProductMediaByProductId.');
            }
            const localVarPath = `/product/{id}/media`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Fetch products by visibility with pagination
         * @param {number} [page] page number to fetch. first page is one.
         * @param {number} [size] number of elements per page
         * @param {Visibility} [visibility] 
         * @param {number} [categoryId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductsPaged(page?: number, size?: number, visibility?: Visibility, categoryId?: number, options: any = {}): RequestArgs {
            const localVarPath = `/product/paged`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (visibility !== undefined) {
                localVarQueryParameter['visibility'] = visibility;
            }

            if (categoryId !== undefined) {
                localVarQueryParameter['categoryId'] = categoryId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Import product from platform to user scope
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importPlatformProduct(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling importPlatformProduct.');
            }
            const localVarPath = `/product/{id}/import`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update product by id
         * @param {number} id the id of the product to update (idempotent)
         * @param {ProductRequest} productRequest &lt;b&gt;Mandatory&lt;/b&gt; product#name, product#content \\n &lt;b&gt;Unique&lt;/b&gt; product#name &amp; author (derived from token) \\n
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProductById(id: number, productRequest: ProductRequest, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateProductById.');
            }
            // verify required parameter 'productRequest' is not null or undefined
            if (productRequest === null || productRequest === undefined) {
                throw new RequiredError('productRequest','Required parameter productRequest was null or undefined when calling updateProductById.');
            }
            const localVarPath = `/product/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof productRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(productRequest !== undefined ? productRequest : {}) : (productRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update product categories (idempotent)
         * @param {number} id 
         * @param {Array<EntityID>} entityID List of Category#id (overrides the previous categories)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProductCategories(id: number, entityID: Array<EntityID>, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateProductCategories.');
            }
            // verify required parameter 'entityID' is not null or undefined
            if (entityID === null || entityID === undefined) {
                throw new RequiredError('entityID','Required parameter entityID was null or undefined when calling updateProductCategories.');
            }
            const localVarPath = `/product/{id}/categories`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof entityID !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(entityID !== undefined ? entityID : {}) : (entityID || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductApi - functional programming interface
 * @export
 */
export const ProductApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add product media asset
         * @param {number} id product#id
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addProductMedia(id: number, file?: any, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MediaAsset>> {
            const localVarAxiosArgs = ProductApiAxiosParamCreator(configuration).addProductMedia(id, file, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Create a new product
         * @param {ProductRequest} productRequest &lt;b&gt;Mandatory&lt;/b&gt; product#name, product#content \\n &lt;b&gt;Unique&lt;/b&gt; product#name &amp; author (derived from token) \\n
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProduct(productRequest: ProductRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Product> {
            const localVarAxiosArgs = ProductApiAxiosParamCreator(configuration).createProduct(productRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Delete product by id
         * @param {number} id the id of the product to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProduct(id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = ProductApiAxiosParamCreator(configuration).deleteProduct(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Delete product media asset
         * @param {number} id 
         * @param {number} mediaId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProductMedia(id: number, mediaId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MediaAsset>> {
            const localVarAxiosArgs = ProductApiAxiosParamCreator(configuration).deleteProductMedia(id, mediaId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get product by id
         * @param {number} id the id of the product to fetch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductById(id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Product> {
            const localVarAxiosArgs = ProductApiAxiosParamCreator(configuration).getProductById(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get product categories by product id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductCategoriesByProductId(id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Category>> {
            const localVarAxiosArgs = ProductApiAxiosParamCreator(configuration).getProductCategoriesByProductId(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get product media files by product id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductMediaByProductId(id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MediaAsset>> {
            const localVarAxiosArgs = ProductApiAxiosParamCreator(configuration).getProductMediaByProductId(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Fetch products by visibility with pagination
         * @param {number} [page] page number to fetch. first page is one.
         * @param {number} [size] number of elements per page
         * @param {Visibility} [visibility] 
         * @param {number} [categoryId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductsPaged(page?: number, size?: number, visibility?: Visibility, categoryId?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Product>> {
            const localVarAxiosArgs = ProductApiAxiosParamCreator(configuration).getProductsPaged(page, size, visibility, categoryId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Import product from platform to user scope
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importPlatformProduct(id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Product> {
            const localVarAxiosArgs = ProductApiAxiosParamCreator(configuration).importPlatformProduct(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Update product by id
         * @param {number} id the id of the product to update (idempotent)
         * @param {ProductRequest} productRequest &lt;b&gt;Mandatory&lt;/b&gt; product#name, product#content \\n &lt;b&gt;Unique&lt;/b&gt; product#name &amp; author (derived from token) \\n
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProductById(id: number, productRequest: ProductRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Product> {
            const localVarAxiosArgs = ProductApiAxiosParamCreator(configuration).updateProductById(id, productRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Update product categories (idempotent)
         * @param {number} id 
         * @param {Array<EntityID>} entityID List of Category#id (overrides the previous categories)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProductCategories(id: number, entityID: Array<EntityID>, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = ProductApiAxiosParamCreator(configuration).updateProductCategories(id, entityID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ProductApi - factory interface
 * @export
 */
export const ProductApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Add product media asset
         * @param {number} id product#id
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addProductMedia(id: number, file?: any, options?: any) {
            return ProductApiFp(configuration).addProductMedia(id, file, options)(axios, basePath);
        },
        /**
         * 
         * @summary Create a new product
         * @param {ProductRequest} productRequest &lt;b&gt;Mandatory&lt;/b&gt; product#name, product#content \\n &lt;b&gt;Unique&lt;/b&gt; product#name &amp; author (derived from token) \\n
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProduct(productRequest: ProductRequest, options?: any) {
            return ProductApiFp(configuration).createProduct(productRequest, options)(axios, basePath);
        },
        /**
         * 
         * @summary Delete product by id
         * @param {number} id the id of the product to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProduct(id: number, options?: any) {
            return ProductApiFp(configuration).deleteProduct(id, options)(axios, basePath);
        },
        /**
         * 
         * @summary Delete product media asset
         * @param {number} id 
         * @param {number} mediaId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProductMedia(id: number, mediaId: number, options?: any) {
            return ProductApiFp(configuration).deleteProductMedia(id, mediaId, options)(axios, basePath);
        },
        /**
         * 
         * @summary Get product by id
         * @param {number} id the id of the product to fetch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductById(id: number, options?: any) {
            return ProductApiFp(configuration).getProductById(id, options)(axios, basePath);
        },
        /**
         * 
         * @summary Get product categories by product id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductCategoriesByProductId(id: number, options?: any) {
            return ProductApiFp(configuration).getProductCategoriesByProductId(id, options)(axios, basePath);
        },
        /**
         * 
         * @summary Get product media files by product id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductMediaByProductId(id: number, options?: any) {
            return ProductApiFp(configuration).getProductMediaByProductId(id, options)(axios, basePath);
        },
        /**
         * 
         * @summary Fetch products by visibility with pagination
         * @param {number} [page] page number to fetch. first page is one.
         * @param {number} [size] number of elements per page
         * @param {Visibility} [visibility] 
         * @param {number} [categoryId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductsPaged(page?: number, size?: number, visibility?: Visibility, categoryId?: number, options?: any) {
            return ProductApiFp(configuration).getProductsPaged(page, size, visibility, categoryId, options)(axios, basePath);
        },
        /**
         * 
         * @summary Import product from platform to user scope
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importPlatformProduct(id: number, options?: any) {
            return ProductApiFp(configuration).importPlatformProduct(id, options)(axios, basePath);
        },
        /**
         * 
         * @summary Update product by id
         * @param {number} id the id of the product to update (idempotent)
         * @param {ProductRequest} productRequest &lt;b&gt;Mandatory&lt;/b&gt; product#name, product#content \\n &lt;b&gt;Unique&lt;/b&gt; product#name &amp; author (derived from token) \\n
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProductById(id: number, productRequest: ProductRequest, options?: any) {
            return ProductApiFp(configuration).updateProductById(id, productRequest, options)(axios, basePath);
        },
        /**
         * 
         * @summary Update product categories (idempotent)
         * @param {number} id 
         * @param {Array<EntityID>} entityID List of Category#id (overrides the previous categories)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProductCategories(id: number, entityID: Array<EntityID>, options?: any) {
            return ProductApiFp(configuration).updateProductCategories(id, entityID, options)(axios, basePath);
        },
    };
};

/**
 * ProductApi - object-oriented interface
 * @export
 * @class ProductApi
 * @extends {BaseAPI}
 */
export class ProductApi extends BaseAPI {
    /**
     * 
     * @summary Add product media asset
     * @param {number} id product#id
     * @param {any} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public addProductMedia(id: number, file?: any, options?: any) {
        return ProductApiFp(this.configuration).addProductMedia(id, file, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Create a new product
     * @param {ProductRequest} productRequest &lt;b&gt;Mandatory&lt;/b&gt; product#name, product#content \\n &lt;b&gt;Unique&lt;/b&gt; product#name &amp; author (derived from token) \\n
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public createProduct(productRequest: ProductRequest, options?: any) {
        return ProductApiFp(this.configuration).createProduct(productRequest, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Delete product by id
     * @param {number} id the id of the product to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public deleteProduct(id: number, options?: any) {
        return ProductApiFp(this.configuration).deleteProduct(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Delete product media asset
     * @param {number} id 
     * @param {number} mediaId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public deleteProductMedia(id: number, mediaId: number, options?: any) {
        return ProductApiFp(this.configuration).deleteProductMedia(id, mediaId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Get product by id
     * @param {number} id the id of the product to fetch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public getProductById(id: number, options?: any) {
        return ProductApiFp(this.configuration).getProductById(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Get product categories by product id
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public getProductCategoriesByProductId(id: number, options?: any) {
        return ProductApiFp(this.configuration).getProductCategoriesByProductId(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Get product media files by product id
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public getProductMediaByProductId(id: number, options?: any) {
        return ProductApiFp(this.configuration).getProductMediaByProductId(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Fetch products by visibility with pagination
     * @param {number} [page] page number to fetch. first page is one.
     * @param {number} [size] number of elements per page
     * @param {Visibility} [visibility] 
     * @param {number} [categoryId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public getProductsPaged(page?: number, size?: number, visibility?: Visibility, categoryId?: number, options?: any) {
        return ProductApiFp(this.configuration).getProductsPaged(page, size, visibility, categoryId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Import product from platform to user scope
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public importPlatformProduct(id: number, options?: any) {
        return ProductApiFp(this.configuration).importPlatformProduct(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Update product by id
     * @param {number} id the id of the product to update (idempotent)
     * @param {ProductRequest} productRequest &lt;b&gt;Mandatory&lt;/b&gt; product#name, product#content \\n &lt;b&gt;Unique&lt;/b&gt; product#name &amp; author (derived from token) \\n
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public updateProductById(id: number, productRequest: ProductRequest, options?: any) {
        return ProductApiFp(this.configuration).updateProductById(id, productRequest, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Update product categories (idempotent)
     * @param {number} id 
     * @param {Array<EntityID>} entityID List of Category#id (overrides the previous categories)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public updateProductCategories(id: number, entityID: Array<EntityID>, options?: any) {
        return ProductApiFp(this.configuration).updateProductCategories(id, entityID, options)(this.axios, this.basePath);
    }

}


/**
 * PublicationProfileApi - axios parameter creator
 * @export
 */
export const PublicationProfileApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new publicationProfile
         * @param {PublicationProfileRequest} publicationProfileRequest &lt;b&gt;Mandatory&lt;/b&gt; name, category, defaultTheme, logo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPublicationProfile(publicationProfileRequest: PublicationProfileRequest, options: any = {}): RequestArgs {
            // verify required parameter 'publicationProfileRequest' is not null or undefined
            if (publicationProfileRequest === null || publicationProfileRequest === undefined) {
                throw new RequiredError('publicationProfileRequest','Required parameter publicationProfileRequest was null or undefined when calling createPublicationProfile.');
            }
            const localVarPath = `/publicationProfile`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof publicationProfileRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(publicationProfileRequest !== undefined ? publicationProfileRequest : {}) : (publicationProfileRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the user related publicationProfile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublicationProfile(options: any = {}): RequestArgs {
            const localVarPath = `/publicationProfile`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get publication Profile categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublicationProfileCategories(options: any = {}): RequestArgs {
            const localVarPath = `/publicationProfile/categories`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update the user publicationProfile
         * @param {PublicationProfileRequest} publicationProfileRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePublicationProfile(publicationProfileRequest: PublicationProfileRequest, options: any = {}): RequestArgs {
            // verify required parameter 'publicationProfileRequest' is not null or undefined
            if (publicationProfileRequest === null || publicationProfileRequest === undefined) {
                throw new RequiredError('publicationProfileRequest','Required parameter publicationProfileRequest was null or undefined when calling updatePublicationProfile.');
            }
            const localVarPath = `/publicationProfile`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof publicationProfileRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(publicationProfileRequest !== undefined ? publicationProfileRequest : {}) : (publicationProfileRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update publication profile categories (idempotent)
         * @param {Array<EntityID>} entityID List of Category#id (overrides the previous categories)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePublicationProfileCategories(entityID: Array<EntityID>, options: any = {}): RequestArgs {
            // verify required parameter 'entityID' is not null or undefined
            if (entityID === null || entityID === undefined) {
                throw new RequiredError('entityID','Required parameter entityID was null or undefined when calling updatePublicationProfileCategories.');
            }
            const localVarPath = `/publicationProfile/categories`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof entityID !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(entityID !== undefined ? entityID : {}) : (entityID || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PublicationProfileApi - functional programming interface
 * @export
 */
export const PublicationProfileApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new publicationProfile
         * @param {PublicationProfileRequest} publicationProfileRequest &lt;b&gt;Mandatory&lt;/b&gt; name, category, defaultTheme, logo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPublicationProfile(publicationProfileRequest: PublicationProfileRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PublicationProfile> {
            const localVarAxiosArgs = PublicationProfileApiAxiosParamCreator(configuration).createPublicationProfile(publicationProfileRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get the user related publicationProfile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublicationProfile(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PublicationProfile> {
            const localVarAxiosArgs = PublicationProfileApiAxiosParamCreator(configuration).getPublicationProfile(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get publication Profile categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublicationProfileCategories(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Category>> {
            const localVarAxiosArgs = PublicationProfileApiAxiosParamCreator(configuration).getPublicationProfileCategories(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Update the user publicationProfile
         * @param {PublicationProfileRequest} publicationProfileRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePublicationProfile(publicationProfileRequest: PublicationProfileRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PublicationProfile> {
            const localVarAxiosArgs = PublicationProfileApiAxiosParamCreator(configuration).updatePublicationProfile(publicationProfileRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Update publication profile categories (idempotent)
         * @param {Array<EntityID>} entityID List of Category#id (overrides the previous categories)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePublicationProfileCategories(entityID: Array<EntityID>, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = PublicationProfileApiAxiosParamCreator(configuration).updatePublicationProfileCategories(entityID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * PublicationProfileApi - factory interface
 * @export
 */
export const PublicationProfileApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Create a new publicationProfile
         * @param {PublicationProfileRequest} publicationProfileRequest &lt;b&gt;Mandatory&lt;/b&gt; name, category, defaultTheme, logo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPublicationProfile(publicationProfileRequest: PublicationProfileRequest, options?: any) {
            return PublicationProfileApiFp(configuration).createPublicationProfile(publicationProfileRequest, options)(axios, basePath);
        },
        /**
         * 
         * @summary Get the user related publicationProfile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublicationProfile(options?: any) {
            return PublicationProfileApiFp(configuration).getPublicationProfile(options)(axios, basePath);
        },
        /**
         * 
         * @summary Get publication Profile categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublicationProfileCategories(options?: any) {
            return PublicationProfileApiFp(configuration).getPublicationProfileCategories(options)(axios, basePath);
        },
        /**
         * 
         * @summary Update the user publicationProfile
         * @param {PublicationProfileRequest} publicationProfileRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePublicationProfile(publicationProfileRequest: PublicationProfileRequest, options?: any) {
            return PublicationProfileApiFp(configuration).updatePublicationProfile(publicationProfileRequest, options)(axios, basePath);
        },
        /**
         * 
         * @summary Update publication profile categories (idempotent)
         * @param {Array<EntityID>} entityID List of Category#id (overrides the previous categories)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePublicationProfileCategories(entityID: Array<EntityID>, options?: any) {
            return PublicationProfileApiFp(configuration).updatePublicationProfileCategories(entityID, options)(axios, basePath);
        },
    };
};

/**
 * PublicationProfileApi - object-oriented interface
 * @export
 * @class PublicationProfileApi
 * @extends {BaseAPI}
 */
export class PublicationProfileApi extends BaseAPI {
    /**
     * 
     * @summary Create a new publicationProfile
     * @param {PublicationProfileRequest} publicationProfileRequest &lt;b&gt;Mandatory&lt;/b&gt; name, category, defaultTheme, logo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicationProfileApi
     */
    public createPublicationProfile(publicationProfileRequest: PublicationProfileRequest, options?: any) {
        return PublicationProfileApiFp(this.configuration).createPublicationProfile(publicationProfileRequest, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Get the user related publicationProfile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicationProfileApi
     */
    public getPublicationProfile(options?: any) {
        return PublicationProfileApiFp(this.configuration).getPublicationProfile(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Get publication Profile categories
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicationProfileApi
     */
    public getPublicationProfileCategories(options?: any) {
        return PublicationProfileApiFp(this.configuration).getPublicationProfileCategories(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Update the user publicationProfile
     * @param {PublicationProfileRequest} publicationProfileRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicationProfileApi
     */
    public updatePublicationProfile(publicationProfileRequest: PublicationProfileRequest, options?: any) {
        return PublicationProfileApiFp(this.configuration).updatePublicationProfile(publicationProfileRequest, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Update publication profile categories (idempotent)
     * @param {Array<EntityID>} entityID List of Category#id (overrides the previous categories)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicationProfileApi
     */
    public updatePublicationProfileCategories(entityID: Array<EntityID>, options?: any) {
        return PublicationProfileApiFp(this.configuration).updatePublicationProfileCategories(entityID, options)(this.axios, this.basePath);
    }

}


/**
 * StreamerApi - axios parameter creator
 * @export
 */
export const StreamerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary get device campaigns and related templates
         * @param {string} uniqueId update the device (idempotent)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeviceCampaigns(uniqueId: string, options: any = {}): RequestArgs {
            // verify required parameter 'uniqueId' is not null or undefined
            if (uniqueId === null || uniqueId === undefined) {
                throw new RequiredError('uniqueId','Required parameter uniqueId was null or undefined when calling getDeviceCampaigns.');
            }
            const localVarPath = `/streamer/{uniqueId}/campaigns`
                .replace(`{${"uniqueId"}}`, encodeURIComponent(String(uniqueId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update device physical information
         * @param {string} uniqueId update the device (idempotent)
         * @param {StreamingDevice} streamingDevice 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDeviceInformation(uniqueId: string, streamingDevice: StreamingDevice, options: any = {}): RequestArgs {
            // verify required parameter 'uniqueId' is not null or undefined
            if (uniqueId === null || uniqueId === undefined) {
                throw new RequiredError('uniqueId','Required parameter uniqueId was null or undefined when calling updateDeviceInformation.');
            }
            // verify required parameter 'streamingDevice' is not null or undefined
            if (streamingDevice === null || streamingDevice === undefined) {
                throw new RequiredError('streamingDevice','Required parameter streamingDevice was null or undefined when calling updateDeviceInformation.');
            }
            const localVarPath = `/streamer/{uniqueId}`
                .replace(`{${"uniqueId"}}`, encodeURIComponent(String(uniqueId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof streamingDevice !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(streamingDevice !== undefined ? streamingDevice : {}) : (streamingDevice || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StreamerApi - functional programming interface
 * @export
 */
export const StreamerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary get device campaigns and related templates
         * @param {string} uniqueId update the device (idempotent)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeviceCampaigns(uniqueId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Campaign>> {
            const localVarAxiosArgs = StreamerApiAxiosParamCreator(configuration).getDeviceCampaigns(uniqueId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Update device physical information
         * @param {string} uniqueId update the device (idempotent)
         * @param {StreamingDevice} streamingDevice 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDeviceInformation(uniqueId: string, streamingDevice: StreamingDevice, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<StreamingDevice> {
            const localVarAxiosArgs = StreamerApiAxiosParamCreator(configuration).updateDeviceInformation(uniqueId, streamingDevice, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * StreamerApi - factory interface
 * @export
 */
export const StreamerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary get device campaigns and related templates
         * @param {string} uniqueId update the device (idempotent)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeviceCampaigns(uniqueId: string, options?: any) {
            return StreamerApiFp(configuration).getDeviceCampaigns(uniqueId, options)(axios, basePath);
        },
        /**
         * 
         * @summary Update device physical information
         * @param {string} uniqueId update the device (idempotent)
         * @param {StreamingDevice} streamingDevice 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDeviceInformation(uniqueId: string, streamingDevice: StreamingDevice, options?: any) {
            return StreamerApiFp(configuration).updateDeviceInformation(uniqueId, streamingDevice, options)(axios, basePath);
        },
    };
};

/**
 * StreamerApi - object-oriented interface
 * @export
 * @class StreamerApi
 * @extends {BaseAPI}
 */
export class StreamerApi extends BaseAPI {
    /**
     * 
     * @summary get device campaigns and related templates
     * @param {string} uniqueId update the device (idempotent)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreamerApi
     */
    public getDeviceCampaigns(uniqueId: string, options?: any) {
        return StreamerApiFp(this.configuration).getDeviceCampaigns(uniqueId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Update device physical information
     * @param {string} uniqueId update the device (idempotent)
     * @param {StreamingDevice} streamingDevice 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreamerApi
     */
    public updateDeviceInformation(uniqueId: string, streamingDevice: StreamingDevice, options?: any) {
        return StreamerApiFp(this.configuration).updateDeviceInformation(uniqueId, streamingDevice, options)(this.axios, this.basePath);
    }

}


/**
 * TemplateApi - axios parameter creator
 * @export
 */
export const TemplateApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new template
         * @param {TemplateRequest} templateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTemplate(templateRequest: TemplateRequest, options: any = {}): RequestArgs {
            // verify required parameter 'templateRequest' is not null or undefined
            if (templateRequest === null || templateRequest === undefined) {
                throw new RequiredError('templateRequest','Required parameter templateRequest was null or undefined when calling createTemplate.');
            }
            const localVarPath = `/template`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof templateRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(templateRequest !== undefined ? templateRequest : {}) : (templateRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete template by id
         * @param {number} id the id of the template to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTemplate(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteTemplate.');
            }
            const localVarPath = `/template/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get template by id
         * @param {number} id the id of the template to fetch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTemplateById(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getTemplateById.');
            }
            const localVarPath = `/template/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get template categories by template id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTemplateCategoriesByTemplateId(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getTemplateCategoriesByTemplateId.');
            }
            const localVarPath = `/template/{id}/categories`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Fetch templates by visibility and content-type with pagination
         * @param {number} [page] page number to fetch. first page is one.
         * @param {number} [size] number of elements per page
         * @param {Visibility} [visibility] 
         * @param {TemplateContentType} [type] The template contentType
         * @param {number} [categoryId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTemplatesPaged(page?: number, size?: number, visibility?: Visibility, type?: TemplateContentType, categoryId?: number, options: any = {}): RequestArgs {
            const localVarPath = `/template/paged`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (visibility !== undefined) {
                localVarQueryParameter['visibility'] = visibility;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (categoryId !== undefined) {
                localVarQueryParameter['categoryId'] = categoryId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Import template from platform to user scope
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importPlatformTemplate(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling importPlatformTemplate.');
            }
            const localVarPath = `/template/{id}/import`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update template by id
         * @param {number} id the id of the template to update
         * @param {TemplateRequest} templateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTemplateById(id: number, templateRequest: TemplateRequest, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateTemplateById.');
            }
            // verify required parameter 'templateRequest' is not null or undefined
            if (templateRequest === null || templateRequest === undefined) {
                throw new RequiredError('templateRequest','Required parameter templateRequest was null or undefined when calling updateTemplateById.');
            }
            const localVarPath = `/template/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof templateRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(templateRequest !== undefined ? templateRequest : {}) : (templateRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update template categories (idempotent)
         * @param {number} id 
         * @param {Array<EntityID>} entityID List of Category#id (overrides the previous categories)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTemplateCategories(id: number, entityID: Array<EntityID>, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateTemplateCategories.');
            }
            // verify required parameter 'entityID' is not null or undefined
            if (entityID === null || entityID === undefined) {
                throw new RequiredError('entityID','Required parameter entityID was null or undefined when calling updateTemplateCategories.');
            }
            const localVarPath = `/template/{id}/categories`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof entityID !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(entityID !== undefined ? entityID : {}) : (entityID || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TemplateApi - functional programming interface
 * @export
 */
export const TemplateApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new template
         * @param {TemplateRequest} templateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTemplate(templateRequest: TemplateRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Template> {
            const localVarAxiosArgs = TemplateApiAxiosParamCreator(configuration).createTemplate(templateRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Delete template by id
         * @param {number} id the id of the template to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTemplate(id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = TemplateApiAxiosParamCreator(configuration).deleteTemplate(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get template by id
         * @param {number} id the id of the template to fetch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTemplateById(id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Template> {
            const localVarAxiosArgs = TemplateApiAxiosParamCreator(configuration).getTemplateById(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get template categories by template id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTemplateCategoriesByTemplateId(id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Category>> {
            const localVarAxiosArgs = TemplateApiAxiosParamCreator(configuration).getTemplateCategoriesByTemplateId(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Fetch templates by visibility and content-type with pagination
         * @param {number} [page] page number to fetch. first page is one.
         * @param {number} [size] number of elements per page
         * @param {Visibility} [visibility] 
         * @param {TemplateContentType} [type] The template contentType
         * @param {number} [categoryId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTemplatesPaged(page?: number, size?: number, visibility?: Visibility, type?: TemplateContentType, categoryId?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Template>> {
            const localVarAxiosArgs = TemplateApiAxiosParamCreator(configuration).getTemplatesPaged(page, size, visibility, type, categoryId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Import template from platform to user scope
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importPlatformTemplate(id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Template> {
            const localVarAxiosArgs = TemplateApiAxiosParamCreator(configuration).importPlatformTemplate(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Update template by id
         * @param {number} id the id of the template to update
         * @param {TemplateRequest} templateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTemplateById(id: number, templateRequest: TemplateRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Template> {
            const localVarAxiosArgs = TemplateApiAxiosParamCreator(configuration).updateTemplateById(id, templateRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Update template categories (idempotent)
         * @param {number} id 
         * @param {Array<EntityID>} entityID List of Category#id (overrides the previous categories)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTemplateCategories(id: number, entityID: Array<EntityID>, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = TemplateApiAxiosParamCreator(configuration).updateTemplateCategories(id, entityID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * TemplateApi - factory interface
 * @export
 */
export const TemplateApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Create a new template
         * @param {TemplateRequest} templateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTemplate(templateRequest: TemplateRequest, options?: any) {
            return TemplateApiFp(configuration).createTemplate(templateRequest, options)(axios, basePath);
        },
        /**
         * 
         * @summary Delete template by id
         * @param {number} id the id of the template to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTemplate(id: number, options?: any) {
            return TemplateApiFp(configuration).deleteTemplate(id, options)(axios, basePath);
        },
        /**
         * 
         * @summary Get template by id
         * @param {number} id the id of the template to fetch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTemplateById(id: number, options?: any) {
            return TemplateApiFp(configuration).getTemplateById(id, options)(axios, basePath);
        },
        /**
         * 
         * @summary Get template categories by template id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTemplateCategoriesByTemplateId(id: number, options?: any) {
            return TemplateApiFp(configuration).getTemplateCategoriesByTemplateId(id, options)(axios, basePath);
        },
        /**
         * 
         * @summary Fetch templates by visibility and content-type with pagination
         * @param {number} [page] page number to fetch. first page is one.
         * @param {number} [size] number of elements per page
         * @param {Visibility} [visibility] 
         * @param {TemplateContentType} [type] The template contentType
         * @param {number} [categoryId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTemplatesPaged(page?: number, size?: number, visibility?: Visibility, type?: TemplateContentType, categoryId?: number, options?: any) {
            return TemplateApiFp(configuration).getTemplatesPaged(page, size, visibility, type, categoryId, options)(axios, basePath);
        },
        /**
         * 
         * @summary Import template from platform to user scope
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importPlatformTemplate(id: number, options?: any) {
            return TemplateApiFp(configuration).importPlatformTemplate(id, options)(axios, basePath);
        },
        /**
         * 
         * @summary Update template by id
         * @param {number} id the id of the template to update
         * @param {TemplateRequest} templateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTemplateById(id: number, templateRequest: TemplateRequest, options?: any) {
            return TemplateApiFp(configuration).updateTemplateById(id, templateRequest, options)(axios, basePath);
        },
        /**
         * 
         * @summary Update template categories (idempotent)
         * @param {number} id 
         * @param {Array<EntityID>} entityID List of Category#id (overrides the previous categories)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTemplateCategories(id: number, entityID: Array<EntityID>, options?: any) {
            return TemplateApiFp(configuration).updateTemplateCategories(id, entityID, options)(axios, basePath);
        },
    };
};

/**
 * TemplateApi - object-oriented interface
 * @export
 * @class TemplateApi
 * @extends {BaseAPI}
 */
export class TemplateApi extends BaseAPI {
    /**
     * 
     * @summary Create a new template
     * @param {TemplateRequest} templateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateApi
     */
    public createTemplate(templateRequest: TemplateRequest, options?: any) {
        return TemplateApiFp(this.configuration).createTemplate(templateRequest, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Delete template by id
     * @param {number} id the id of the template to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateApi
     */
    public deleteTemplate(id: number, options?: any) {
        return TemplateApiFp(this.configuration).deleteTemplate(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Get template by id
     * @param {number} id the id of the template to fetch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateApi
     */
    public getTemplateById(id: number, options?: any) {
        return TemplateApiFp(this.configuration).getTemplateById(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Get template categories by template id
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateApi
     */
    public getTemplateCategoriesByTemplateId(id: number, options?: any) {
        return TemplateApiFp(this.configuration).getTemplateCategoriesByTemplateId(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Fetch templates by visibility and content-type with pagination
     * @param {number} [page] page number to fetch. first page is one.
     * @param {number} [size] number of elements per page
     * @param {Visibility} [visibility] 
     * @param {TemplateContentType} [type] The template contentType
     * @param {number} [categoryId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateApi
     */
    public getTemplatesPaged(page?: number, size?: number, visibility?: Visibility, type?: TemplateContentType, categoryId?: number, options?: any) {
        return TemplateApiFp(this.configuration).getTemplatesPaged(page, size, visibility, type, categoryId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Import template from platform to user scope
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateApi
     */
    public importPlatformTemplate(id: number, options?: any) {
        return TemplateApiFp(this.configuration).importPlatformTemplate(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Update template by id
     * @param {number} id the id of the template to update
     * @param {TemplateRequest} templateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateApi
     */
    public updateTemplateById(id: number, templateRequest: TemplateRequest, options?: any) {
        return TemplateApiFp(this.configuration).updateTemplateById(id, templateRequest, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Update template categories (idempotent)
     * @param {number} id 
     * @param {Array<EntityID>} entityID List of Category#id (overrides the previous categories)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateApi
     */
    public updateTemplateCategories(id: number, entityID: Array<EntityID>, options?: any) {
        return TemplateApiFp(this.configuration).updateTemplateCategories(id, entityID, options)(this.axios, this.basePath);
    }

}


/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Activate User Email
         * @param {string} userId 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activateUser(userId: string, code: string, options: any = {}): RequestArgs {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling activateUser.');
            }
            // verify required parameter 'code' is not null or undefined
            if (code === null || code === undefined) {
                throw new RequiredError('code','Required parameter code was null or undefined when calling activateUser.');
            }
            const localVarPath = `/user/activation/{userId}/{code}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary change the user\'s password
         * @param {ChangePassword} changePassword 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeUserPassword(changePassword: ChangePassword, options: any = {}): RequestArgs {
            // verify required parameter 'changePassword' is not null or undefined
            if (changePassword === null || changePassword === undefined) {
                throw new RequiredError('changePassword','Required parameter changePassword was null or undefined when calling changeUserPassword.');
            }
            const localVarPath = `/user/resetpassword`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof changePassword !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(changePassword !== undefined ? changePassword : {}) : (changePassword || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get All Users by page number and size
         * @param {number} [page] page number to fetch. first page is one.
         * @param {number} [size] size of each page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsersPaged(page?: number, size?: number, options: any = {}): RequestArgs {
            const localVarPath = `/user/paged`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get user by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserById(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getUserById.');
            }
            const localVarPath = `/user/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Logs user into system
         * @param {LoginPassword} loginPassword &lt;b&gt;Mandatory&lt;/b&gt; email, password. \\n
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(loginPassword: LoginPassword, options: any = {}): RequestArgs {
            // verify required parameter 'loginPassword' is not null or undefined
            if (loginPassword === null || loginPassword === undefined) {
                throw new RequiredError('loginPassword','Required parameter loginPassword was null or undefined when calling login.');
            }
            const localVarPath = `/user/login`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof loginPassword !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(loginPassword !== undefined ? loginPassword : {}) : (loginPassword || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Logs Admin user on behalf another user
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginOnBehalf(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling loginOnBehalf.');
            }
            const localVarPath = `/user/login/onbehalf/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Reset User Password
         * @param {string} userId 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetUserPassword(userId: string, code: string, options: any = {}): RequestArgs {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling resetUserPassword.');
            }
            // verify required parameter 'code' is not null or undefined
            if (code === null || code === undefined) {
                throw new RequiredError('code','Required parameter code was null or undefined when calling resetUserPassword.');
            }
            const localVarPath = `/user/resetpassword/{userId}/{code}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Send Email Activation
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendActivationMail(email: string, options: any = {}): RequestArgs {
            // verify required parameter 'email' is not null or undefined
            if (email === null || email === undefined) {
                throw new RequiredError('email','Required parameter email was null or undefined when calling sendActivationMail.');
            }
            const localVarPath = `/user/activation/{email}`
                .replace(`{${"email"}}`, encodeURIComponent(String(email)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Send reset password email
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendResetPasswordMail(email: string, options: any = {}): RequestArgs {
            // verify required parameter 'email' is not null or undefined
            if (email === null || email === undefined) {
                throw new RequiredError('email','Required parameter email was null or undefined when calling sendResetPasswordMail.');
            }
            const localVarPath = `/user/resetpassword`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new user
         * @summary Signed up a new user
         * @param {UserSignup} userSignup &lt;b&gt;Unique&lt;/b&gt; email \\n &lt;b&gt;Constraint&lt;/b&gt; password 8-40 char long, with special char \&#39;@#$%!\&#39; and at least one digit &lt;b&gt;Constraint&lt;/b&gt; email must follow email convention
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signUpNewUser(userSignup: UserSignup, options: any = {}): RequestArgs {
            // verify required parameter 'userSignup' is not null or undefined
            if (userSignup === null || userSignup === undefined) {
                throw new RequiredError('userSignup','Required parameter userSignup was null or undefined when calling signUpNewUser.');
            }
            const localVarPath = `/user/signup`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof userSignup !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(userSignup !== undefined ? userSignup : {}) : (userSignup || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an existing user
         * @summary Update an existing user
         * @param {User} user 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(user: User, options: any = {}): RequestArgs {
            // verify required parameter 'user' is not null or undefined
            if (user === null || user === undefined) {
                throw new RequiredError('user','Required parameter user was null or undefined when calling updateUser.');
            }
            const localVarPath = `/user`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof user !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(user !== undefined ? user : {}) : (user || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Activate User Email
         * @param {string} userId 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activateUser(userId: string, code: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserToken> {
            const localVarAxiosArgs = UserApiAxiosParamCreator(configuration).activateUser(userId, code, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary change the user\'s password
         * @param {ChangePassword} changePassword 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeUserPassword(changePassword: ChangePassword, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = UserApiAxiosParamCreator(configuration).changeUserPassword(changePassword, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get All Users by page number and size
         * @param {number} [page] page number to fetch. first page is one.
         * @param {number} [size] size of each page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsersPaged(page?: number, size?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>> {
            const localVarAxiosArgs = UserApiAxiosParamCreator(configuration).getAllUsersPaged(page, size, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get user by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserById(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User> {
            const localVarAxiosArgs = UserApiAxiosParamCreator(configuration).getUserById(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Logs user into system
         * @param {LoginPassword} loginPassword &lt;b&gt;Mandatory&lt;/b&gt; email, password. \\n
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(loginPassword: LoginPassword, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserToken> {
            const localVarAxiosArgs = UserApiAxiosParamCreator(configuration).login(loginPassword, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Logs Admin user on behalf another user
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginOnBehalf(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserToken> {
            const localVarAxiosArgs = UserApiAxiosParamCreator(configuration).loginOnBehalf(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Reset User Password
         * @param {string} userId 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetUserPassword(userId: string, code: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserToken> {
            const localVarAxiosArgs = UserApiAxiosParamCreator(configuration).resetUserPassword(userId, code, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Send Email Activation
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendActivationMail(email: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = UserApiAxiosParamCreator(configuration).sendActivationMail(email, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Send reset password email
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendResetPasswordMail(email: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = UserApiAxiosParamCreator(configuration).sendResetPasswordMail(email, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a new user
         * @summary Signed up a new user
         * @param {UserSignup} userSignup &lt;b&gt;Unique&lt;/b&gt; email \\n &lt;b&gt;Constraint&lt;/b&gt; password 8-40 char long, with special char \&#39;@#$%!\&#39; and at least one digit &lt;b&gt;Constraint&lt;/b&gt; email must follow email convention
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signUpNewUser(userSignup: UserSignup, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User> {
            const localVarAxiosArgs = UserApiAxiosParamCreator(configuration).signUpNewUser(userSignup, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update an existing user
         * @summary Update an existing user
         * @param {User} user 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(user: User, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User> {
            const localVarAxiosArgs = UserApiAxiosParamCreator(configuration).updateUser(user, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Activate User Email
         * @param {string} userId 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activateUser(userId: string, code: string, options?: any) {
            return UserApiFp(configuration).activateUser(userId, code, options)(axios, basePath);
        },
        /**
         * 
         * @summary change the user\'s password
         * @param {ChangePassword} changePassword 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeUserPassword(changePassword: ChangePassword, options?: any) {
            return UserApiFp(configuration).changeUserPassword(changePassword, options)(axios, basePath);
        },
        /**
         * 
         * @summary Get All Users by page number and size
         * @param {number} [page] page number to fetch. first page is one.
         * @param {number} [size] size of each page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsersPaged(page?: number, size?: number, options?: any) {
            return UserApiFp(configuration).getAllUsersPaged(page, size, options)(axios, basePath);
        },
        /**
         * 
         * @summary Get user by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserById(id: string, options?: any) {
            return UserApiFp(configuration).getUserById(id, options)(axios, basePath);
        },
        /**
         * 
         * @summary Logs user into system
         * @param {LoginPassword} loginPassword &lt;b&gt;Mandatory&lt;/b&gt; email, password. \\n
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(loginPassword: LoginPassword, options?: any) {
            return UserApiFp(configuration).login(loginPassword, options)(axios, basePath);
        },
        /**
         * 
         * @summary Logs Admin user on behalf another user
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginOnBehalf(id: string, options?: any) {
            return UserApiFp(configuration).loginOnBehalf(id, options)(axios, basePath);
        },
        /**
         * 
         * @summary Reset User Password
         * @param {string} userId 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetUserPassword(userId: string, code: string, options?: any) {
            return UserApiFp(configuration).resetUserPassword(userId, code, options)(axios, basePath);
        },
        /**
         * 
         * @summary Send Email Activation
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendActivationMail(email: string, options?: any) {
            return UserApiFp(configuration).sendActivationMail(email, options)(axios, basePath);
        },
        /**
         * 
         * @summary Send reset password email
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendResetPasswordMail(email: string, options?: any) {
            return UserApiFp(configuration).sendResetPasswordMail(email, options)(axios, basePath);
        },
        /**
         * Create a new user
         * @summary Signed up a new user
         * @param {UserSignup} userSignup &lt;b&gt;Unique&lt;/b&gt; email \\n &lt;b&gt;Constraint&lt;/b&gt; password 8-40 char long, with special char \&#39;@#$%!\&#39; and at least one digit &lt;b&gt;Constraint&lt;/b&gt; email must follow email convention
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signUpNewUser(userSignup: UserSignup, options?: any) {
            return UserApiFp(configuration).signUpNewUser(userSignup, options)(axios, basePath);
        },
        /**
         * Update an existing user
         * @summary Update an existing user
         * @param {User} user 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(user: User, options?: any) {
            return UserApiFp(configuration).updateUser(user, options)(axios, basePath);
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @summary Activate User Email
     * @param {string} userId 
     * @param {string} code 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public activateUser(userId: string, code: string, options?: any) {
        return UserApiFp(this.configuration).activateUser(userId, code, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary change the user\'s password
     * @param {ChangePassword} changePassword 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public changeUserPassword(changePassword: ChangePassword, options?: any) {
        return UserApiFp(this.configuration).changeUserPassword(changePassword, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Get All Users by page number and size
     * @param {number} [page] page number to fetch. first page is one.
     * @param {number} [size] size of each page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getAllUsersPaged(page?: number, size?: number, options?: any) {
        return UserApiFp(this.configuration).getAllUsersPaged(page, size, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Get user by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUserById(id: string, options?: any) {
        return UserApiFp(this.configuration).getUserById(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Logs user into system
     * @param {LoginPassword} loginPassword &lt;b&gt;Mandatory&lt;/b&gt; email, password. \\n
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public login(loginPassword: LoginPassword, options?: any) {
        return UserApiFp(this.configuration).login(loginPassword, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Logs Admin user on behalf another user
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public loginOnBehalf(id: string, options?: any) {
        return UserApiFp(this.configuration).loginOnBehalf(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Reset User Password
     * @param {string} userId 
     * @param {string} code 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public resetUserPassword(userId: string, code: string, options?: any) {
        return UserApiFp(this.configuration).resetUserPassword(userId, code, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Send Email Activation
     * @param {string} email 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public sendActivationMail(email: string, options?: any) {
        return UserApiFp(this.configuration).sendActivationMail(email, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Send reset password email
     * @param {string} email 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public sendResetPasswordMail(email: string, options?: any) {
        return UserApiFp(this.configuration).sendResetPasswordMail(email, options)(this.axios, this.basePath);
    }

    /**
     * Create a new user
     * @summary Signed up a new user
     * @param {UserSignup} userSignup &lt;b&gt;Unique&lt;/b&gt; email \\n &lt;b&gt;Constraint&lt;/b&gt; password 8-40 char long, with special char \&#39;@#$%!\&#39; and at least one digit &lt;b&gt;Constraint&lt;/b&gt; email must follow email convention
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public signUpNewUser(userSignup: UserSignup, options?: any) {
        return UserApiFp(this.configuration).signUpNewUser(userSignup, options)(this.axios, this.basePath);
    }

    /**
     * Update an existing user
     * @summary Update an existing user
     * @param {User} user 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public updateUser(user: User, options?: any) {
        return UserApiFp(this.configuration).updateUser(user, options)(this.axios, this.basePath);
    }

}


